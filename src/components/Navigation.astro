---
import ConnectWallet from "./ConnectWallet.astro";
---

<nav class="bg-gray-900/50 backdrop-blur-sm border-b border-purple-300/20">
  <div class="max-w-6xl mx-auto px-4">
    <div class="flex justify-between items-center h-16">
      <!-- Logo/Brand -->
      <div class="flex items-center">
        <a href="/" class="text-xl font-bold text-white hover:text-purple-300 transition-colors">
          DeFi Unite
        </a>
      </div>
      
      <!-- Navigation Links -->
      <div class="hidden md:flex items-center space-x-8">
        <a href="/" class="text-gray-300 hover:text-white transition-colors">
          Home
        </a>
        <a href="/pools" class="text-gray-300 hover:text-white transition-colors">
          Pools
        </a>
        <a href="/swap" class="text-gray-300 hover:text-white transition-colors">
          Swap
        </a>
        <a href="/portfolio" class="text-gray-300 hover:text-white transition-colors">
          Portfolio
        </a>
        <ConnectWallet />
      </div>
      
      <!-- Mobile menu and wallet buttons -->
      <div class="md:hidden flex items-center gap-2">
        <button id="mobile-wallet-button" class="bg-purple-600 hover:bg-purple-700 text-white p-2 rounded-full text-xs transition-colors" aria-label="Wallet">
          🔗
        </button>
        <button id="mobile-menu-button" type="button" class="text-gray-300 hover:text-white transition-colors" aria-label="Toggle menu">
          <svg id="menu-icon" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
          <svg id="close-icon" class="h-6 w-6 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>
    
    <!-- Mobile menu -->
    <div id="mobile-menu" class="md:hidden hidden">
      <div class="px-2 pt-2 pb-3 space-y-1 bg-gray-800/80 backdrop-blur-sm rounded-lg mt-2">
        <a href="/" class="block px-3 py-2 text-gray-300 hover:text-white hover:bg-gray-700/50 rounded-md transition-colors">
          Home
        </a>
        <a href="/pools" class="block px-3 py-2 text-gray-300 hover:text-white hover:bg-gray-700/50 rounded-md transition-colors">
          Pools
        </a>
        <a href="/swap" class="block px-3 py-2 text-gray-300 hover:text-white hover:bg-gray-700/50 rounded-md transition-colors">
          Swap
        </a>
        <a href="/portfolio" class="block px-3 py-2 text-gray-300 hover:text-white hover:bg-gray-700/50 rounded-md transition-colors">
          Portfolio
        </a>
      </div>
    </div>
  </div>
</nav>

<script>
  import { getPublicKey, disconnect, connect } from "../stellar-wallets-kit";

  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const menuIcon = document.getElementById('menu-icon');
  const closeIcon = document.getElementById('close-icon');
  const mobileWalletButton = document.getElementById('mobile-wallet-button');

  let isConnected = false;
  let logoutClickCount = 0;
  let logoutTimeout;

  // Check wallet connection status and update mobile wallet button
  async function updateMobileWalletState() {
    const publicKey = await getPublicKey();
    isConnected = !!publicKey;
    
    if (mobileWalletButton) {
      if (isConnected) {
        mobileWalletButton.innerHTML = '✅';
        mobileWalletButton.className = 'bg-green-600 hover:bg-green-700 text-white p-2 rounded-full text-xs transition-colors';
        mobileWalletButton.setAttribute('aria-label', 'Connected - Double click to logout');
      } else {
        mobileWalletButton.innerHTML = '🔗';
        mobileWalletButton.className = 'bg-purple-600 hover:bg-purple-700 text-white p-2 rounded-full text-xs transition-colors';
        mobileWalletButton.setAttribute('aria-label', 'Connect Wallet');
      }
    }
    
    // Reset logout click count when state changes
    logoutClickCount = 0;
    if (logoutTimeout) {
      clearTimeout(logoutTimeout);
    }
  }

  // Mobile wallet functionality (connect/disconnect)
  mobileWalletButton?.addEventListener('click', async () => {
    if (!isConnected) {
      // Connect wallet
      await connect(updateMobileWalletState);
    } else {
      // Handle logout with double-click requirement
      logoutClickCount++;
      
      if (logoutClickCount === 1) {
        // First click - show confirmation state
        mobileWalletButton.innerHTML = '❓';
        mobileWalletButton.className = 'bg-yellow-600 hover:bg-yellow-700 text-white p-2 rounded-full text-xs transition-colors';
        mobileWalletButton.setAttribute('aria-label', 'Click again to confirm logout');
        
        // Reset after 3 seconds if no second click
        logoutTimeout = setTimeout(() => {
          logoutClickCount = 0;
          updateMobileWalletState();
        }, 3000);
      } else if (logoutClickCount >= 2) {
        // Second click - actually logout
        clearTimeout(logoutTimeout);
        await disconnect(updateMobileWalletState);
      }
    }
  });

  // Mobile menu toggle
  mobileMenuButton?.addEventListener('click', () => {
    const isHidden = mobileMenu?.classList.contains('hidden');
    
    if (isHidden) {
      mobileMenu?.classList.remove('hidden');
      menuIcon?.classList.add('hidden');
      closeIcon?.classList.remove('hidden');
    } else {
      mobileMenu?.classList.add('hidden');
      menuIcon?.classList.remove('hidden');
      closeIcon?.classList.add('hidden');
    }
  });

  // Close mobile menu when clicking on a link
  const mobileLinks = mobileMenu?.querySelectorAll('a');
  mobileLinks?.forEach(link => {
    link.addEventListener('click', () => {
      mobileMenu?.classList.add('hidden');
      menuIcon?.classList.remove('hidden');
      closeIcon?.classList.add('hidden');
    });
  });

  // Initialize mobile wallet state
  updateMobileWalletState();

  // Listen for wallet state changes from the desktop ConnectWallet component
  document.addEventListener('walletStateChanged', updateMobileWalletState);
</script>
